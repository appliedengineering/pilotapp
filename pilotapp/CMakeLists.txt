cmake_minimum_required(VERSION 3.9)

project(pilotapp LANGUAGES CXX)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(EXECUTABLE_OUTPUT_PATH "bin")

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")
set(CMAKE_CXX_STANDARD_REQUIRED ON)

###### Platform Specific Options

## Raspberry Pi 4 Options
# includes all libs
#include_directories("/usr/include")
#link_directories("/usr/lib")
#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")

## MacOS Options

# make sure to add "/usr/local/Homebrew/Cellar/qt@5/5.15.2_2/include/**" to include paths under cpp config on vs code
# make sure to add "/Users/richy/ArcGIS_SDKs/Qt100.13/sdk/include/**" to include paths under cpp config on vs code
# make sure to add "/usr/local/Homebrew/Cellar/zeromq/4.3.4/include/**" to include paths under cpp config on vs code

## QT Options
#set(QT_INSTALL_PATH "/usr/local/Homebrew/Cellar/qt@5/5.15.2_2")
set(QT_INSTALL_PATH "/opt/homebrew/Cellar/qt@5/5.15.3")
#set(QT_INSTALL_PATH "O:\\Qt\\5.15.2\\msvc2019_64")
#set(QT_INSTALL_PATH "/opt/Qt/5.15.2/")
set(CMAKE_PREFIX_PATH "${QT_INSTALL_PATH}")  # <--- MAKE SURE HOMEBREW INSTALLATION FOR QT IS x86_64 (arm is not supported for dependencies)

## ArcGIS Options
#set(ArcGISRuntime_INSTALL_DIR "/Users/richy/ArcGIS_SDKs/Qt100.7") # <--- Location of ArcGIS SDK ([location]/ArcGIS_SDKs/Qt100.13/)
#set(ArcGISRuntime_INSTALL_DIR "/opt/arcgis")
#set(ArcGISRuntime_DIR "${ArcGISRuntime_INSTALL_DIR}/sdk/ideintegration")

#set(ArcGIS_PLATFORM_NAME "macOS") # options are: android, iOS, macOS
#include_directories("${ArcGISRuntime_INSTALL_DIR}/sdk/include") # ArcGIS SDK include files

## ZMQ Options
set(ZMQ_VERSION "4.3.4")
#set(ZMQ_INSTALL_PATH "/usr/local/Homebrew/Cellar/zeromq/${ZMQ_VERSION}/")
set(ZMQ_INSTALL_PATH "/opt/homebrew/Cellar/zeromq/${ZMQ_VERSION}")
include_directories("${ZMQ_INSTALL_PATH}/include")
link_directories("${ZMQ_INSTALL_PATH}/lib")

## Boost Options
#set(BOOST_INSTALL_PATH "/usr/local/Homebrew/Cellar/boost/1.78.0_1") # before the "boost" (mind the lowercase) folder
set(BOOST_INSTALL_PATH "/opt/homebrew/Cellar/boost/1.78.0_1")
include_directories("${BOOST_INSTALL_PATH}/include")
set(Boost_INCLUDE_DIR "${BOOST_INSTALL_PATH}/include")

## Third Party Options (QGeoView)
include_directories("/usr/local/include")
link_directories("/usr/local/lib")

## msgpack Options (not needed)
#set(MSGPACK_INSTALL_PATH "${PROJECT_SOURCE_DIR}/3rd_party/msgpack")
#add_subdirectory("${MSGPACK_INSTALL_PATH}")
#include_directories("${MSGPACK_INSTALL_PATH}/include/msgpack")

# NOTE: IF YOU GET AN ERROR ABOUT "Library not loaded" referenced from "libEsriCommonQt.dylib", 
# create a symbolic link between the "Frameworks" folder in the Qt installation folder (QT_INSTALL_PATH)
# and the "${PROJECT_SOURCE_DIR}/build" folder generated by CMAKE such that "${PROJECT_SOURCE_DIR}/build/Frameworks" exists
# For MacOS, you can do this: https://apple.stackexchange.com/a/115648/ 
# (for instance ln -s /usr/local/Homebrew/Cellar/qt@5/5.15.2_2/Frameworks Users/richy/Documents/GitHub/pilotapp/pilotapp/build)

######

## Set CMAKE cmake script dir

#set(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake" ${CMAKE_MODULE_PATH})
set(CMAKE_SOURCE_DIR ${PROJECT_SOURCE_DIR})

## Set CMAKE Arch to x86_64

#set(CMAKE_GENERATOR_PLATFORM x86_64)
#set(CMAKE_SYSTEM_PROCESSOR x86_64)
#set(CMAKE_OSX_ARCHITECTURES x86_64)

message("Binary DIR = ${CMAKE_BINARY_DIR}")
message("Source DIR = ${CMAKE_SOURCE_DIR}")

# QtCreator supports the following variables for Android, which are identical to qmake Android variables.
# Check http://doc.qt.io/qt-5/deployment-android.html for more information.
# They need to be set before the find_package(Qt5 ...) call.

#if(ANDROID)
#    set(ANDROID_PACKAGE_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/android")
#    if (ANDROID_ABI STREQUAL "armeabi-v7a")
#        set(ANDROID_EXTRA_LIBS
#            ${CMAKE_CURRENT_SOURCE_DIR}/path/to/libcrypto.so
#            ${CMAKE_CURRENT_SOURCE_DIR}/path/to/libssl.so)
#    endif()
#endif()

find_package(QT NAMES Qt6 Qt5 COMPONENTS Widgets REQUIRED)
find_package(Qt${QT_VERSION_MAJOR} COMPONENTS Widgets Multimedia REQUIRED)

#find_package(ArcGISRuntime 100.7 COMPONENTS Cpp REQUIRED)

find_package(msgpack REQUIRED)

#find_package(PkgConfig REQUIRED)

if(ANDROID)
  add_library(pilotapp SHARED
  #  main.cpp
  #  home.cpp
  #  home.h
  )
else()
  add_executable(pilotapp
    "Source/main.cpp"
    "Source/MainWindow.cpp"
    "Source/MainWindow.h"
    "Source/Widgets/Pages/Home/homePage.cpp"
    "Source/Widgets/Pages/Home/homePage.h"
    "Source/Backend/Utilities/utilities.cpp"
    "Source/Backend/Utilities/utilities.h"
    "Source/Backend/Display Control/displayControlEventFilter.cpp"
    "Source/Backend/Display Control/displayControlEventFilter.h"
    "Source/Backend/Communication/communicationManager.cpp"
    "Source/Backend/Communication/communicationManager.h"
    "Source/Backend/Communication/communicationThread.cpp"
    "Source/Backend/Communication/communicationThread.h"
    "Source/Backend/Communication/dataManager.cpp"
    "Source/Backend/Communication/dataManager.h"
    "Source/Backend/Boat Kernel/boatKernel.cpp"
    "Source/Backend/Boat Kernel/boatKernel.h"
    "Source/Backend/Preferences/preferencesManager.cpp"
    "Source/Backend/Preferences/preferencesManager.h"
    "Source/Backend/logManager.cpp"
    "Source/Backend/logManager.h"
    "Source/Widgets/Widgets/Toolbar/toolbar.cpp"
    "Source/Widgets/Widgets/Toolbar/toolbar.h"
    "Source/Widgets/Widgets/LeftContentSlate/leftContentSlate.cpp"
    "Source/Widgets/Widgets/LeftContentSlate/leftContentSlate.h"
    "Source/Widgets/Widgets/MainContentSlate/mainContentSlate.cpp"
    "Source/Widgets/Widgets/MainContentSlate/mainContentSlate.h"
    "Source/Widgets/Widgets/MainContentSlate/contentWidget.cpp"
    "Source/Widgets/Widgets/MainContentSlate/contentWidget.h"
    "Source/Widgets/Widgets/MainContentSlate/ContentWidgets/Map/mapWidget.cpp"
    "Source/Widgets/Widgets/MainContentSlate/ContentWidgets/Map/mapWidget.h"
    "Source/Widgets/Widgets/MainContentSlate/ContentWidgets/Power/powerWidget.cpp"
    "Source/Widgets/Widgets/MainContentSlate/ContentWidgets/Power/powerWidget.h"
    "Source/Widgets/Widgets/MainContentSlate/ContentWidgets/Screen/screenWidget.cpp"
    "Source/Widgets/Widgets/MainContentSlate/ContentWidgets/Screen/screenWidget.h"
    "Source/Widgets/Widgets/MainContentSlate/ContentWidgets/Settings/settingsWidget.cpp"
    "Source/Widgets/Widgets/MainContentSlate/ContentWidgets/Settings/settingsWidget.h"
    "Source/Widgets/Widgets/MainContentSlate/ContentWidgets/Settings/SettingsContentWidgets/Options/settingsOptionsWidget.cpp"
    "Source/Widgets/Widgets/MainContentSlate/ContentWidgets/Settings/SettingsContentWidgets/Options/settingsOptionsWidget.h"
    "Source/Widgets/Widgets/MainContentSlate/ContentWidgets/Settings/SettingsContentWidgets/Logs/settingsLogsWidget.cpp"
    "Source/Widgets/Widgets/MainContentSlate/ContentWidgets/Settings/SettingsContentWidgets/Logs/settingsLogsWidget.h"
    "Source/Widgets/Widgets/MainContentSlate/ContentWidgets/Telemetry/telemetryWidget.cpp"
    "Source/Widgets/Widgets/MainContentSlate/ContentWidgets/Telemetry/telemetryWidget.h"
    "Source/Widgets/Widgets/MainContentSlate/ContentWidgets/Map/mapSettingsWidget.cpp"
    "Source/Widgets/Widgets/MainContentSlate/ContentWidgets/Map/mapSettingsWidget.h"
    "Source/Custom/RangeSlider/RangeSlider.cpp"
    "Source/Custom/RangeSlider/RangeSlider.h"
    "Source/Custom/TouchKeypad/touchKeypad.cpp"
    "Source/Custom/TouchKeypad/touchKeypad.h"
    "Source/Custom/TouchInputWidgets/TouchNumericalLineEdit/touchNumericalLineEdit.cpp"
    "Source/Custom/TouchInputWidgets/TouchNumericalLineEdit/touchNumericalLineEdit.h"
    "resources.qrc")

 # add_custom_command( # copies style.qss to bin folder
 #   TARGET pilotapp POST_BUILD
 #   COMMAND ${CMAKE_COMMAND} -E copy
 #           ${CMAKE_SOURCE_DIR}/Source/style.qss
 #           ${CMAKE_CURRENT_BINARY_DIR}/bin/style.qss)

 # add_custom_command( # copies assets folder to bin folder
 #   TARGET pilotapp POST_BUILD
 #   COMMAND ${CMAKE_COMMAND} -E copy
 #           ${CMAKE_SOURCE_DIR}/Assets
 #           ${CMAKE_CURRENT_BINARY_DIR}/bin/Assets)

# Copy required ArcGIS dynamic libraries to the build folder as a post-build step.
#message("Copy ArcGIS Runtime libs")
#add_custom_command(TARGET pilotapp POST_BUILD
#  COMMAND ${CMAKE_COMMAND} -E copy_if_different
#  ${ArcGISRuntime_LIBRARIES}
#  "${PROJECT_BINARY_DIR}/bin")

endif()

# ArcGISRuntime::Cpp
target_link_libraries(pilotapp PRIVATE 
  Qt${QT_VERSION_MAJOR}::Widgets 
  Qt${QT_VERSION_MAJOR}::Multimedia
#  ArcGISRuntime::Cpp
  zmq
  msgpackc-cxx
  QGeoView
  )
  
